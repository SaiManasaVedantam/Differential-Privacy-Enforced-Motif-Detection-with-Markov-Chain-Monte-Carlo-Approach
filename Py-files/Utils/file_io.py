# -*- coding: utf-8 -*-
"""file_io.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MOFjG-mpNn4N8omGDOxKcEoKWCaY0qzg

### This notebook contains functions to perform all the required File IO operations
"""

# Function to read sequences from input file given
# Input: sequence_count
# Output: Returns dna sequences

def read_sequences_from_input_file(base_path, sequence_count):

  # Reading sequences from the file
  dna_input_path = base_path + "differential_privacy_enforced_sequences_" + str(sequence_count) + ".txt"
  file_ptr = open(dna_input_path, 'r')
  seq_title_line, dna_sequences = True, []

  for each_seq in file_ptr:
    if seq_title_line:
      seq_title_line = False
    elif seq_title_line == False:
      dna_sequences.append(each_seq.strip('\n'))
      seq_title_line = True
  file_ptr.close()
  
  return dna_sequences

# Function to store results obtained to respective files
# Input: sequence_count, information_vector, profile_matrix
# Output: Does not return anything. Instead, it saves results to respective files
# For predicted results

def save_prediction_results_to_respective_files(base_path, motif_result, sequence_count, information_vector, profile_matrix):

  # Writing results to respective files
  # Result: predicted motif sites in dna sequences
  predicted_sites = information_vector[1][-1]
  output_sites_file = base_path + "predicted_sites_" + str(sequence_count) + ".txt"
  file_ptr = open(output_sites_file, 'w')
  for idx in range(0, len(predicted_sites)):
    file_ptr.write(str(predicted_sites[idx]) + '\n')
  file_ptr.close()

  # Result: Obtained motif
  output_motif_file = base_path + "predicted_motif_" + str(sequence_count) + ".txt"
  file_ptr = open(output_motif_file, 'w')
  file_ptr.write(motif_result + '\n')
  for row in range(0, len(profile_matrix)):
    for col in range(0, len(profile_matrix[row])):
      file_ptr.write(str(int(profile_matrix[row][col])) + '\t')
    file_ptr.write('\n')
  file_ptr.close()

# Function to save modified sequences, motif positions, random motif and profile matrix to respective files
# Input: sequence_count (Integer), modified_sequences (List), random_positions (List), profile_matrix (List)
# Output: Does not return anything but saves data to respective files
# For data generation, motif positions etc.

def save_generated_data_to_respective_files(base_path, sequence_count, modified_sequences, random_motif, random_positions, profile_matrix):

  # Write modified sequences to differential_privacy_enforced_sequences.txt file
  file_path = base_path + "differential_privacy_enforced_sequences_" + str(sequence_count) + ".txt"
  file_ptr = open(file_path, "w")
  for i in range(0, sequence_count):
    file_ptr.write("seq_" + str(i+1) + "\n" + modified_sequences[i] + "\n")
  file_ptr.close()

  # Write planted motif positions to motif_positions.txt file
  file_path = base_path + "motif_positions_" + str(sequence_count) + ".txt"
  file_ptr = open(file_path, "w")
  for i in range(0, sequence_count):
    file_ptr.write(str(random_positions[i]) + "\n")
  file_ptr.close()

  # Write the initially generated random motif and its corresponsding profile matrix to a file
  file_path = base_path + "random_motif.txt"
  file_ptr = open(file_path, "w")
  motif_length = len(random_motif)
  file_ptr.write(">" + random_motif + "\t of length " + str(motif_length) + "\n")
  for i in range(0, len(profile_matrix)):
    for j in range(0, len(profile_matrix[0])):
      file_ptr.write(str(profile_matrix[i][j]) + "\t")
    file_ptr.write("\n")
  file_ptr.write("<")
  file_ptr.close()