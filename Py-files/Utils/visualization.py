# -*- coding: utf-8 -*-
"""visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TcRpPD578XGTl_9TV3SDzUQH_tsonIWp

### This notebook defines methods to perform visualization and summarization to make inferences
"""

# Import necessary packages
import numpy as np
import matplotlib.pyplot as plt
from difflib import SequenceMatcher

# Function to plot a graph to show the relation between sequence generation time and dataset size
# Input: sequence_generation_times, sequence_counts

def visualize_sequence_generation_times(sequence_generation_times, sequence_counts):
  plt.plot(sequence_generation_times, sequence_counts)
  plt.xlabel('Sequence Generation Time (in seconds)')
  plt.ylabel('Sequence Count')
  plt.title('Visualizing the effect of sequence count on generation times')
  plt.show()

# Function to plot a graph to show the relation between motif generation time and dataset size
# Input: motif_detection_times, sequence_counts

def visualize_motif_generation_times(motif_detection_times, sequence_counts):
  plt.plot(motif_detection_times, sequence_counts)
  plt.xlabel('Motif Detection Time (in seconds)')
  plt.ylabel('Sequence Count')
  plt.title('Visualizing the effect of sequence count on motif detection times')
  plt.show()

# Function to find the percentage of sequences that have a minimum match of 50% of motif
# Input: all_dna_sequences, motif_results
# Output: Returns motif counts

def find_count_of_threshold_matched_sequences(all_dna_sequences, motif_results):
  
  # Finding the percentage match of motif in each input dna sequence
  motif_counts = {}
  print("Original motif counts:")

  for sequences in all_dna_sequences:
    motif_cnt = [0, 0, 0, 0, 0]
    data_size = len(sequences)

    for motif_idx in range(0, 5):
      motif = motif_results[motif_idx]
      for each_sequence in sequences:
        # seq_lenth = 300 and motif_length = 10
        # If atleast 5 characters are matched, it is good
        # So, percentage match should be 5/300 ~ 0.015
        if SequenceMatcher(None, motif, each_sequence).ratio() >= 0.01:
          motif_cnt[motif_idx] += 1
        
    print(motif_cnt, "for ", data_size, " dna sequences")
    motif_counts[data_size] = motif_cnt
    
  return motif_counts

# Function to find the normalized motif counts from actual counts
# Input: motif_counts
# Output: Returns normalized motif counts

def compute_normalized_motif_counts(motif_counts):

  # To plot the motif counts along the same scale, we normalize the counts
  normalized_motif_counts = {}
  print("\n\nNormalized motif counts:")

  for key in motif_counts:
    normalized_list = []
    for each_val in motif_counts[key]:
      normalized_list.append(each_val / key)
    normalized_motif_counts[key] = normalized_list
    print(normalized_motif_counts[key])

  return normalized_motif_counts

# Function to plot the motif match observations made
# Input: motif_results, normalized_motif_counts
# Output: Displays different bar graphs for various input sizes

def plot_motif_match_observations(motif_results, normalized_motif_counts):
  
  # Plotting normalized motif counts across the dna sequences considered
  colors = ['green', 'orange', 'olive', 'purple', 'maroon']
  idx = 0

  for key in normalized_motif_counts:
    x_axis = motif_results
    y_axis = normalized_motif_counts[key]
    
    bar_chart = plt.figure(figsize = (8, 5))
    plt.bar(x_axis, y_axis, color = colors[idx])
    plt.yticks(np.arange(0, 0.10, 0.02))
    plt.xlabel("Motifs found")
    plt.ylabel("Dna sequences which matched atleast 50% of motif_length")
    plt.title("Plot for " + str(key) + " sequences")
    
    idx += 1
    plt.show()
